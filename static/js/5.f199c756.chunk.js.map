{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","Message","className","s","message","messages","DialogItem","dialog","id","activeClassName","active","name","maxLenght50","maxLenghtCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","m","dialogsItems","values","onSendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,oJCGrGC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,WAAD,CAAUC,GAAG,eAHT,GACXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAqCL,K,qFCR/DM,EAJC,SAACJ,GACb,OAAO,qBAAKK,UAAWC,IAAEC,QAAlB,SAA4BP,EAAMQ,Y,QCK9BC,EANI,SAACT,GAChB,OAAO,qBAAKK,UAAWC,IAAEI,OAAlB,SACP,cAAC,IAAD,CAAST,GAAI,YAAaD,EAAMW,GAAIC,gBAAiBN,IAAEO,OAAvD,SAAgEb,EAAMc,U,wCCqCpEC,EAAcC,YAAiB,IAkB/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAhBL,SAAAlB,GACrB,OACE,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBD,KAAM,iBACNa,YAAa,uBAEf,8BACE,kDAUOC,EAxDC,SAAA5B,GACd,IAAIP,EAAQO,EAAM6B,YAGdC,EAAkBrC,EAAMsC,QAAQC,KAAI,SAAAC,GACtC,OAAO,cAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBH,GAAIsB,EAAEtB,IAAZsB,EAAEtB,OAGtCuB,EAAmBzC,EAAMe,SAASwB,KAAI,SAAAG,GACxC,OAAO,cAAC,EAAD,CAAS3B,SAAU2B,EAAE5B,QAAoBI,GAAIwB,EAAExB,IAAZwB,EAAExB,OAM9C,IAAKX,EAAMN,OACT,OAAO,cAAC,WAAD,CAAUO,GAAI,WAOvB,OACE,sBAAKI,UAAWC,IAAEyB,QAAlB,UACE,qBAAK1B,UAAWC,IAAE8B,aAAlB,SAAiCN,IACjC,sBAAKzB,UAAWC,IAAEE,SAAlB,UACE,8BAAM0B,IACN,cAACjB,EAAD,CAAqBG,SATP,SAAAiB,GAClBrC,EAAMsC,cAAcD,EAAOE,0B,yBCThBC,sBACXrC,aAfoB,SAACV,GACrB,MAAO,CACHoC,YAAapC,EAAMoC,gBAIA,SAACY,GACxB,MAAO,CACHH,cAAe,SAACC,GACZE,EAASC,YAAmBH,SAOpC3C,IAFW4C,CAEOZ","file":"static/js/5.f199c756.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1CO29\",\"dialogsItems\":\"Dialogs_dialogsItems__xwgus\",\"active\":\"Dialogs_active__2OLkW\"};","import React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.messages}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\nconst DialogItem = (props) => {\r\n    return <div className={s.dialog}>\r\n    <NavLink to={'/dialogs/'+ props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLenghtCreator, required } from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = props => {\r\n  let state = props.dialogsPage;\r\n\r\n  //Method map\r\n  let dialogsElements = state.dialogs.map(d => {\r\n    return <DialogItem name={d.name} key={d.id} id={d.id} />;\r\n  });\r\n\r\n  let messagesElements = state.messages.map(m => {\r\n    return <Message messages={m.message} key={m.id} id={m.id} />;\r\n  });\r\n  //End\r\n\r\n  /*   let newMessageBody = state.newMessageBody;*/\r\n  //Redirect to Login if user not auth\r\n  if (!props.isAuth) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  let addNewMessage = values => {\r\n    props.onSendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLenght50 = maxLenghtCreator(50);\r\n\r\nconst AddMessageForm = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        validate={[required, maxLenght50]}\r\n        name={\"newMessageBody\"}\r\n        placeholder={\"Enter your message\"}\r\n      />\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMessageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { sendMessageCreator } from '../../redux/dialogs-reducer.js';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs);"],"sourceRoot":""}